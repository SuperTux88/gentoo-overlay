From 4e57caa6dbb284a02c206574e463d2e07499f7a5 Mon Sep 17 00:00:00 2001
From: Benjamin Neff <benjamin@coding4coffee.ch>
Date: Sat, 29 Jul 2023 01:22:26 +0200
Subject: [PATCH] Add handlebars helper to print environment variables

---
 src/handlebars_helpers.rs | 23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/src/handlebars_helpers.rs b/src/handlebars_helpers.rs
index b139bda..88c76a6 100644
--- a/src/handlebars_helpers.rs
+++ b/src/handlebars_helpers.rs
@@ -219,6 +219,28 @@ fn command_output_helper(
     Ok(())
 }
 
+fn env_helper(
+    h: &Helper<'_, '_>,
+    _: &Handlebars<'_>,
+    _: &Context,
+    _: &mut RenderContext<'_, '_>,
+    out: &mut dyn Output,
+) -> HelperResult {
+    let mut params = h.params().iter();
+    let variable = params
+        .next()
+        .ok_or_else(|| RenderError::new("env: No variable name given"))?
+        .render();
+    if params.next().is_some() {
+        return Err(RenderError::new("env: More than one parameter given"));
+    }
+
+    let value = std::env::var(variable).unwrap_or_default();
+    out.write(&value)?;
+
+    Ok(())
+}
+
 #[cfg(windows)]
 fn is_executable(name: &str) -> Result<bool, std::io::Error> {
     let name = if name.ends_with(".exe") {
@@ -269,6 +291,7 @@ fn register_rust_helpers(handlebars: &mut Handlebars<'_>) {
     handlebars.register_helper("is_executable", Box::new(is_executable_helper));
     handlebars.register_helper("command_success", Box::new(command_success_helper));
     handlebars.register_helper("command_output", Box::new(command_output_helper));
+    handlebars.register_helper("env", Box::new(env_helper));
 }
 
 #[cfg(feature = "scripting")]
